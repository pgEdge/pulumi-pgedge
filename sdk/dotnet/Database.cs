// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pgedge.Pgedge
{
    /// <summary>
    /// Manages a pgEdge database.
    /// </summary>
    [PgedgeResourceType("pgedge:index/database:Database")]
    public partial class Database : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Backup configuration for the database.
        /// </summary>
        [Output("backups")]
        public Output<Outputs.DatabaseBackups> Backups { get; private set; } = null!;

        /// <summary>
        /// The ID of the cluster this database belongs to.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// List of components in the database.
        /// </summary>
        [Output("components")]
        public Output<ImmutableArray<Outputs.DatabaseComponent>> Components { get; private set; } = null!;

        /// <summary>
        /// The configuration version of the database.
        /// </summary>
        [Output("configVersion")]
        public Output<string> ConfigVersion { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the database was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The domain associated with the database.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// Extensions configuration for the database.
        /// </summary>
        [Output("extensions")]
        public Output<Outputs.DatabaseExtensions> Extensions { get; private set; } = null!;

        /// <summary>
        /// The name of the database.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Map of nodes in the database.
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableDictionary<string, Outputs.DatabaseNodes>> Nodes { get; private set; } = null!;

        /// <summary>
        /// A list of options for the database.
        /// </summary>
        [Output("options")]
        public Output<ImmutableArray<string>> Options { get; private set; } = null!;

        /// <summary>
        /// The PostgreSQL version of the database.
        /// </summary>
        [Output("pgVersion")]
        public Output<string> PgVersion { get; private set; } = null!;

        /// <summary>
        /// List of roles in the database.
        /// </summary>
        [Output("roles")]
        public Output<ImmutableArray<Outputs.DatabaseRole>> Roles { get; private set; } = null!;

        /// <summary>
        /// The current status of the database.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Database resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Database(string name, DatabaseArgs args, CustomResourceOptions? options = null)
            : base("pgedge:index/database:Database", name, args ?? new DatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Database(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
            : base("pgedge:index/database:Database", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pgEdge/pulumi-pgedge",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Database resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Database Get(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new Database(name, id, state, options);
        }
    }

    public sealed class DatabaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Backup configuration for the database.
        /// </summary>
        [Input("backups")]
        public Input<Inputs.DatabaseBackupsArgs>? Backups { get; set; }

        /// <summary>
        /// The ID of the cluster this database belongs to.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The configuration version of the database.
        /// </summary>
        [Input("configVersion")]
        public Input<string>? ConfigVersion { get; set; }

        /// <summary>
        /// Extensions configuration for the database.
        /// </summary>
        [Input("extensions")]
        public Input<Inputs.DatabaseExtensionsArgs>? Extensions { get; set; }

        /// <summary>
        /// The name of the database.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodes", required: true)]
        private InputMap<Inputs.DatabaseNodesArgs>? _nodes;

        /// <summary>
        /// Map of nodes in the database.
        /// </summary>
        public InputMap<Inputs.DatabaseNodesArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputMap<Inputs.DatabaseNodesArgs>());
            set => _nodes = value;
        }

        [Input("options")]
        private InputList<string>? _options;

        /// <summary>
        /// A list of options for the database.
        /// </summary>
        public InputList<string> Options
        {
            get => _options ?? (_options = new InputList<string>());
            set => _options = value;
        }

        [Input("roles")]
        private InputList<Inputs.DatabaseRoleArgs>? _roles;

        /// <summary>
        /// List of roles in the database.
        /// </summary>
        public InputList<Inputs.DatabaseRoleArgs> Roles
        {
            get => _roles ?? (_roles = new InputList<Inputs.DatabaseRoleArgs>());
            set => _roles = value;
        }

        public DatabaseArgs()
        {
        }
        public static new DatabaseArgs Empty => new DatabaseArgs();
    }

    public sealed class DatabaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Backup configuration for the database.
        /// </summary>
        [Input("backups")]
        public Input<Inputs.DatabaseBackupsGetArgs>? Backups { get; set; }

        /// <summary>
        /// The ID of the cluster this database belongs to.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("components")]
        private InputList<Inputs.DatabaseComponentGetArgs>? _components;

        /// <summary>
        /// List of components in the database.
        /// </summary>
        public InputList<Inputs.DatabaseComponentGetArgs> Components
        {
            get => _components ?? (_components = new InputList<Inputs.DatabaseComponentGetArgs>());
            set => _components = value;
        }

        /// <summary>
        /// The configuration version of the database.
        /// </summary>
        [Input("configVersion")]
        public Input<string>? ConfigVersion { get; set; }

        /// <summary>
        /// The timestamp when the database was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The domain associated with the database.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Extensions configuration for the database.
        /// </summary>
        [Input("extensions")]
        public Input<Inputs.DatabaseExtensionsGetArgs>? Extensions { get; set; }

        /// <summary>
        /// The name of the database.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodes")]
        private InputMap<Inputs.DatabaseNodesGetArgs>? _nodes;

        /// <summary>
        /// Map of nodes in the database.
        /// </summary>
        public InputMap<Inputs.DatabaseNodesGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputMap<Inputs.DatabaseNodesGetArgs>());
            set => _nodes = value;
        }

        [Input("options")]
        private InputList<string>? _options;

        /// <summary>
        /// A list of options for the database.
        /// </summary>
        public InputList<string> Options
        {
            get => _options ?? (_options = new InputList<string>());
            set => _options = value;
        }

        /// <summary>
        /// The PostgreSQL version of the database.
        /// </summary>
        [Input("pgVersion")]
        public Input<string>? PgVersion { get; set; }

        [Input("roles")]
        private InputList<Inputs.DatabaseRoleGetArgs>? _roles;

        /// <summary>
        /// List of roles in the database.
        /// </summary>
        public InputList<Inputs.DatabaseRoleGetArgs> Roles
        {
            get => _roles ?? (_roles = new InputList<Inputs.DatabaseRoleGetArgs>());
            set => _roles = value;
        }

        /// <summary>
        /// The current status of the database.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public DatabaseState()
        {
        }
        public static new DatabaseState Empty => new DatabaseState();
    }
}
