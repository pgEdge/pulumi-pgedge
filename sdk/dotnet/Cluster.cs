// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pgedge.Pgedge
{
    /// <summary>
    /// Interface with the pgEdge service API for clusters.
    /// </summary>
    [PgedgeResourceType("pgedge:index/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the target cloud account
        /// </summary>
        [Output("cloudAccountId")]
        public Output<string> CloudAccountId { get; private set; } = null!;

        /// <summary>
        /// Creation time of the cluster
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("firewallRules")]
        public Output<ImmutableArray<Outputs.ClusterFirewallRule>> FirewallRules { get; private set; } = null!;

        /// <summary>
        /// Name of the network
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("networks")]
        public Output<ImmutableArray<Outputs.ClusterNetwork>> Networks { get; private set; } = null!;

        /// <summary>
        /// Network location for nodes (public or private)
        /// </summary>
        [Output("nodeLocation")]
        public Output<string> NodeLocation { get; private set; } = null!;

        [Output("nodes")]
        public Output<ImmutableArray<Outputs.ClusterNode>> Nodes { get; private set; } = null!;

        [Output("regions")]
        public Output<ImmutableArray<string>> Regions { get; private set; } = null!;

        /// <summary>
        /// ID of the SSH key to add to the cluster nodes
        /// </summary>
        [Output("sshKeyId")]
        public Output<string?> SshKeyId { get; private set; } = null!;

        /// <summary>
        /// Status of the cluster
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("pgedge:index/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("pgedge:index/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pgEdge/pulumi-pgedge",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the target cloud account
        /// </summary>
        [Input("cloudAccountId", required: true)]
        public Input<string> CloudAccountId { get; set; } = null!;

        [Input("firewallRules")]
        private InputList<Inputs.ClusterFirewallRuleArgs>? _firewallRules;
        public InputList<Inputs.ClusterFirewallRuleArgs> FirewallRules
        {
            get => _firewallRules ?? (_firewallRules = new InputList<Inputs.ClusterFirewallRuleArgs>());
            set => _firewallRules = value;
        }

        /// <summary>
        /// Name of the network
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks", required: true)]
        private InputList<Inputs.ClusterNetworkArgs>? _networks;
        public InputList<Inputs.ClusterNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.ClusterNetworkArgs>());
            set => _networks = value;
        }

        /// <summary>
        /// Network location for nodes (public or private)
        /// </summary>
        [Input("nodeLocation", required: true)]
        public Input<string> NodeLocation { get; set; } = null!;

        [Input("nodes", required: true)]
        private InputList<Inputs.ClusterNodeArgs>? _nodes;
        public InputList<Inputs.ClusterNodeArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.ClusterNodeArgs>());
            set => _nodes = value;
        }

        [Input("regions", required: true)]
        private InputList<string>? _regions;
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        /// <summary>
        /// ID of the SSH key to add to the cluster nodes
        /// </summary>
        [Input("sshKeyId")]
        public Input<string>? SshKeyId { get; set; }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the target cloud account
        /// </summary>
        [Input("cloudAccountId")]
        public Input<string>? CloudAccountId { get; set; }

        /// <summary>
        /// Creation time of the cluster
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("firewallRules")]
        private InputList<Inputs.ClusterFirewallRuleGetArgs>? _firewallRules;
        public InputList<Inputs.ClusterFirewallRuleGetArgs> FirewallRules
        {
            get => _firewallRules ?? (_firewallRules = new InputList<Inputs.ClusterFirewallRuleGetArgs>());
            set => _firewallRules = value;
        }

        /// <summary>
        /// Name of the network
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.ClusterNetworkGetArgs>? _networks;
        public InputList<Inputs.ClusterNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.ClusterNetworkGetArgs>());
            set => _networks = value;
        }

        /// <summary>
        /// Network location for nodes (public or private)
        /// </summary>
        [Input("nodeLocation")]
        public Input<string>? NodeLocation { get; set; }

        [Input("nodes")]
        private InputList<Inputs.ClusterNodeGetArgs>? _nodes;
        public InputList<Inputs.ClusterNodeGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.ClusterNodeGetArgs>());
            set => _nodes = value;
        }

        [Input("regions")]
        private InputList<string>? _regions;
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        /// <summary>
        /// ID of the SSH key to add to the cluster nodes
        /// </summary>
        [Input("sshKeyId")]
        public Input<string>? SshKeyId { get; set; }

        /// <summary>
        /// Status of the cluster
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
