// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pgedge:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * List of backup store IDs to associate with the cluster
     */
    public readonly backupStoreIds!: pulumi.Output<string[]>;
    public readonly capacity!: pulumi.Output<number>;
    public readonly cloudAccountId!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly firewallRules!: pulumi.Output<outputs.ClusterFirewallRule[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networks!: pulumi.Output<outputs.ClusterNetwork[]>;
    public readonly nodeLocation!: pulumi.Output<string>;
    public readonly nodes!: pulumi.Output<outputs.ClusterNode[]>;
    public readonly regions!: pulumi.Output<string[]>;
    /**
     * A map of tags to assign to the cluster
     */
    public readonly resourceTags!: pulumi.Output<{[key: string]: string}>;
    public readonly sshKeyId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["backupStoreIds"] = state ? state.backupStoreIds : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["cloudAccountId"] = state ? state.cloudAccountId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["firewallRules"] = state ? state.firewallRules : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["nodeLocation"] = state ? state.nodeLocation : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["resourceTags"] = state ? state.resourceTags : undefined;
            resourceInputs["sshKeyId"] = state ? state.sshKeyId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.cloudAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudAccountId'");
            }
            if ((!args || args.networks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networks'");
            }
            if ((!args || args.nodeLocation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeLocation'");
            }
            if ((!args || args.nodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodes'");
            }
            if ((!args || args.regions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regions'");
            }
            resourceInputs["backupStoreIds"] = args ? args.backupStoreIds : undefined;
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["cloudAccountId"] = args ? args.cloudAccountId : undefined;
            resourceInputs["firewallRules"] = args ? args.firewallRules : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["nodeLocation"] = args ? args.nodeLocation : undefined;
            resourceInputs["nodes"] = args ? args.nodes : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["resourceTags"] = args ? args.resourceTags : undefined;
            resourceInputs["sshKeyId"] = args ? args.sshKeyId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * List of backup store IDs to associate with the cluster
     */
    backupStoreIds?: pulumi.Input<pulumi.Input<string>[]>;
    capacity?: pulumi.Input<number>;
    cloudAccountId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    firewallRules?: pulumi.Input<pulumi.Input<inputs.ClusterFirewallRule>[]>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.ClusterNetwork>[]>;
    nodeLocation?: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.ClusterNode>[]>;
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A map of tags to assign to the cluster
     */
    resourceTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sshKeyId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * List of backup store IDs to associate with the cluster
     */
    backupStoreIds?: pulumi.Input<pulumi.Input<string>[]>;
    capacity?: pulumi.Input<number>;
    cloudAccountId: pulumi.Input<string>;
    firewallRules?: pulumi.Input<pulumi.Input<inputs.ClusterFirewallRule>[]>;
    name?: pulumi.Input<string>;
    networks: pulumi.Input<pulumi.Input<inputs.ClusterNetwork>[]>;
    nodeLocation: pulumi.Input<string>;
    nodes: pulumi.Input<pulumi.Input<inputs.ClusterNode>[]>;
    regions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A map of tags to assign to the cluster
     */
    resourceTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sshKeyId?: pulumi.Input<string>;
}
