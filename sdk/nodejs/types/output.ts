// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ClusterFirewallRule {
    /**
     * Port whose traffic is allowed
     */
    port: number;
    /**
     * CIDRs and/or IP addresses allowed
     */
    sources: string[];
}

export interface ClusterNetwork {
    /**
     * CIDR range for the network
     */
    cidr: string;
    /**
     * Is the network externally defined
     */
    external: boolean;
    /**
     * ID of the network, if externally defined
     */
    externalId: string;
    /**
     * Name of the network
     */
    name: string;
    privateSubnets: string[];
    publicSubnets: string[];
    /**
     * Region of the network
     */
    region: string;
}

export interface ClusterNode {
    /**
     * Cloud provider availability zone name
     */
    availabilityZone: string;
    /**
     * Instance type used for the node
     */
    instanceType: string;
    /**
     * Node name
     */
    name: string;
    options: string[];
    /**
     * Cloud provider region
     */
    region: string;
    /**
     * Volume IOPS of the node data volume
     */
    volumeIops: number;
    /**
     * Volume size of the node data volume
     */
    volumeSize: number;
    /**
     * Volume type of the node data volume
     */
    volumeType: string;
}

export interface GetClustersCluster {
    cloudAccount: outputs.GetClustersClusterCloudAccount;
    /**
     * Cloud account ID of the cluster
     */
    cloudAccountId: string;
    /**
     * Created at of the cluster
     */
    createdAt: string;
    firewallRules: outputs.GetClustersClusterFirewallRule[];
    /**
     * ID of the cluster
     */
    id: string;
    /**
     * Name of the cluster
     */
    name: string;
    networks: outputs.GetClustersClusterNetwork[];
    /**
     * Node location of the cluster
     */
    nodeLocation: string;
    nodes: outputs.GetClustersClusterNode[];
    regions: string[];
    /**
     * SSH key ID of the cluster
     */
    sshKeyId: string;
    /**
     * Status of the cluster
     */
    status: string;
}

export interface GetClustersClusterCloudAccount {
    /**
     * Display name of the node
     */
    id: string;
    /**
     * IP address of the node
     */
    name: string;
    /**
     * Type of the node
     */
    type: string;
}

export interface GetClustersClusterFirewallRule {
    /**
     * IP address of the node
     */
    name: string;
    /**
     * Port for the firewall rule
     */
    port: number;
    /**
     * Sources for the firewall rule
     */
    sources: string[];
}

export interface GetClustersClusterNetwork {
    /**
     * CIDR of the AWS node group
     */
    cidr: string;
    /**
     * Is the network external
     */
    external: boolean;
    /**
     * External ID of the network
     */
    externalId: string;
    /**
     * IP address of the node
     */
    name: string;
    privateSubnets: string[];
    publicSubnets: string[];
    /**
     * Region of the network
     */
    region: string;
}

export interface GetClustersClusterNode {
    /**
     * Cloud provider availability zone name
     */
    availabilityZone: string;
    /**
     * Instance type used for the node
     */
    instanceType: string;
    /**
     * IP address of the node
     */
    name: string;
    options: string[];
    /**
     * Region of the network
     */
    region: string;
    /**
     * Volume IOPS of the node data volume
     */
    volumeIops: number;
    /**
     * Volume size of the node data volume
     */
    volumeSize: number;
    /**
     * Volume type of the node data volume
     */
    volumeType: string;
}

export interface GetDatabasesDatabase {
    /**
     * Updated at of the database
     */
    clusterId: string;
    components: outputs.GetDatabasesDatabaseComponent[];
    /**
     * Config version of the database
     */
    configVersion?: string;
    /**
     * Created at of the database
     */
    createdAt: string;
    /**
     * Domain of the database
     */
    domain: string;
    extensions: outputs.GetDatabasesDatabaseExtensions;
    /**
     * ID of the database
     */
    id: string;
    /**
     * Name of the database
     */
    name: string;
    nodes?: outputs.GetDatabasesDatabaseNode[];
    /**
     * Options for creating the database
     */
    options: string[];
    /**
     * Postgres version of the database
     */
    pgVersion: string;
    roles: outputs.GetDatabasesDatabaseRole[];
    /**
     * Status of the database
     */
    status: string;
    /**
     * Storage used of the database
     */
    storageUsed: number;
    tables: outputs.GetDatabasesDatabaseTable[];
    /**
     * Updated at of the database
     */
    updatedAt: string;
}

export interface GetDatabasesDatabaseComponent {
    /**
     * Id of the component
     */
    id: string;
    /**
     * Name of the component
     */
    name: string;
    /**
     * Release date of the component
     */
    releaseDate: string;
    /**
     * Status of the component
     */
    status: string;
    /**
     * Version of the component
     */
    version: string;
}

export interface GetDatabasesDatabaseExtensions {
    /**
     * Auto manage of the extension
     */
    autoManage: boolean;
    /**
     * Available of the extension
     */
    availables: string[];
    /**
     * Requested of the extension
     */
    requesteds: string[];
}

export interface GetDatabasesDatabaseNode {
    connection: outputs.GetDatabasesDatabaseNodeConnection;
    distanceMeasurement: outputs.GetDatabasesDatabaseNodeDistanceMeasurement;
    extensions: outputs.GetDatabasesDatabaseNodeExtensions;
    location: outputs.GetDatabasesDatabaseNodeLocation;
    /**
     * Name of the component
     */
    name: string;
    /**
     * Region of the location
     */
    region: outputs.GetDatabasesDatabaseNodeRegion;
}

export interface GetDatabasesDatabaseNodeConnection {
    /**
     * Database of the node
     */
    database: string;
    /**
     * External IP of the node
     */
    externalIpAddress: string;
    /**
     * Host of the node
     */
    host: string;
    /**
     * Internal Host of the node
     */
    internalHost: string;
    /**
     * Internal IP of the node
     */
    internalIpAddress: string;
    /**
     * Password of the node
     */
    password: string;
    /**
     * Port of the node
     */
    port: number;
    /**
     * Username of the node
     */
    username: string;
}

export interface GetDatabasesDatabaseNodeDistanceMeasurement {
    /**
     * Distance from a reference point
     */
    distance: number;
    /**
     * Latitude of the reference point
     */
    fromLatitude: number;
    /**
     * Longitude of the reference point
     */
    fromLongitude: number;
    /**
     * Unit of distance measurement
     */
    unit: string;
}

export interface GetDatabasesDatabaseNodeExtensions {
    errors: outputs.GetDatabasesDatabaseNodeExtensionsErrors;
    /**
     * List of installed extensions
     */
    installeds: string[];
}

export interface GetDatabasesDatabaseNodeExtensionsErrors {
    /**
     * Error code anim9ef
     */
    anim9ef: string;
    /**
     * Error code enim3b
     */
    enim3b: string;
    /**
     * Error code laborumd
     */
    laborumd: string;
    /**
     * Error code mollit267
     */
    mollit267: string;
}

export interface GetDatabasesDatabaseNodeLocation {
    /**
     * City of the location
     */
    city: string;
    /**
     * Code of the location
     */
    code: string;
    /**
     * Country of the location
     */
    country: string;
    /**
     * Latitude of the location
     */
    latitude: number;
    /**
     * Longitude of the location
     */
    longitude: number;
    /**
     * Metro code of the location
     */
    metroCode: string;
    /**
     * Name of the component
     */
    name: string;
    /**
     * Postal code of the location
     */
    postalCode: string;
    /**
     * Region of the location
     */
    region: string;
    /**
     * Region code of the location
     */
    regionCode: string;
    /**
     * Timezone of the location
     */
    timezone: string;
}

export interface GetDatabasesDatabaseNodeRegion {
    /**
     * Active status of the region
     */
    active: boolean;
    /**
     * Availability zones of the region
     */
    availabilityZones: string[];
    /**
     * Cloud provider of the region
     */
    cloud: string;
    /**
     * Code of the location
     */
    code: string;
    /**
     * Name of the component
     */
    name: string;
    /**
     * Parent region
     */
    parent: string;
}

export interface GetDatabasesDatabaseRole {
    /**
     * Bypass RLS
     */
    bypassRls: boolean;
    /**
     * Connection limit
     */
    connectionLimit: number;
    /**
     * Create database
     */
    createDb: boolean;
    /**
     * Create role
     */
    createRole: boolean;
    /**
     * Inherit
     */
    inherit: boolean;
    /**
     * Login
     */
    login: boolean;
    /**
     * Name of the component
     */
    name: string;
    /**
     * Replication
     */
    replication: boolean;
    /**
     * Superuser
     */
    superuser: boolean;
}

export interface GetDatabasesDatabaseTable {
    columns: outputs.GetDatabasesDatabaseTableColumn[];
    /**
     * Name of the component
     */
    name: string;
    /**
     * Primary key of the table
     */
    primaryKeys: string[];
    /**
     * Replication sets of the table
     */
    replicationSets: string[];
    /**
     * Schema of the table
     */
    schema: string;
    /**
     * Status of the component
     */
    statuses: outputs.GetDatabasesDatabaseTableStatus[];
}

export interface GetDatabasesDatabaseTableColumn {
    /**
     * Data type of the column
     */
    dataType: string;
    /**
     * Default of the column
     */
    default: string;
    /**
     * Is nullable of the column
     */
    isNullable: boolean;
    /**
     * Is primary key of the column
     */
    isPrimaryKey: boolean;
    /**
     * Name of the component
     */
    name: string;
    /**
     * Ordinal position of the column
     */
    ordinalPosition: number;
}

export interface GetDatabasesDatabaseTableStatus {
    /**
     * Aligned of the table
     */
    aligned: boolean;
    /**
     * Node name of the table
     */
    nodeName: string;
    /**
     * Present of the table
     */
    present: boolean;
    /**
     * Replicating of the table
     */
    replicating: boolean;
}

