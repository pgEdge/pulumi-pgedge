// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ClusterFirewall {
    /**
     * Port for the firewall rule
     */
    port?: number;
    /**
     * Sources for the firewall rule
     */
    sources?: string[];
    /**
     * Type of the firewall rule
     */
    type?: string;
}

export interface ClusterNodeGroups {
    aws: outputs.ClusterNodeGroupsAw[];
    azures: outputs.ClusterNodeGroupsAzure[];
    googles: outputs.ClusterNodeGroupsGoogle[];
}

export interface ClusterNodeGroupsAw {
    /**
     * Availability zones of the AWS node group
     */
    availabilityZones: string[];
    /**
     * CIDR of the AWS node group
     */
    cidr: string;
    /**
     * Instance type of the AWS node group
     */
    instanceType: string;
    /**
     * Node location of the AWS node group
     */
    nodeLocation: string;
    nodes: outputs.ClusterNodeGroupsAwNode[];
    privateSubnets: string[];
    publicSubnets: string[];
    /**
     * Region of the AWS node group
     */
    region: string;
    /**
     * Volume IOPS of the AWS node group
     */
    volumeIops: number;
    /**
     * Volume size of the AWS node group
     */
    volumeSize: number;
    /**
     * Volume type of the AWS node group
     */
    volumeType: string;
}

export interface ClusterNodeGroupsAwNode {
    /**
     * Display name of the node
     */
    displayName: string;
    /**
     * IP address of the node
     */
    ipAddress: string;
    /**
     * Is the node active
     */
    isActive: boolean;
}

export interface ClusterNodeGroupsAzure {
    /**
     * Availability zones of the AWS node group
     */
    availabilityZones: string[];
    /**
     * CIDR of the AWS node group
     */
    cidr: string;
    /**
     * Instance type of the AWS node group
     */
    instanceType: string;
    /**
     * Node location of the AWS node group
     */
    nodeLocation: string;
    nodes: outputs.ClusterNodeGroupsAzureNode[];
    privateSubnets: string[];
    publicSubnets: string[];
    /**
     * Region of the AWS node group
     */
    region: string;
    /**
     * Volume IOPS of the AWS node group
     */
    volumeIops: number;
    /**
     * Volume size of the AWS node group
     */
    volumeSize: number;
    /**
     * Volume type of the AWS node group
     */
    volumeType: string;
}

export interface ClusterNodeGroupsAzureNode {
    /**
     * Display name of the node
     */
    displayName: string;
    /**
     * IP address of the node
     */
    ipAddress: string;
    /**
     * Is the node active
     */
    isActive: boolean;
}

export interface ClusterNodeGroupsGoogle {
    /**
     * Availability zones of the AWS node group
     */
    availabilityZones: string[];
    /**
     * CIDR of the AWS node group
     */
    cidr: string;
    /**
     * Instance type of the AWS node group
     */
    instanceType: string;
    /**
     * Node location of the AWS node group
     */
    nodeLocation: string;
    nodes: outputs.ClusterNodeGroupsGoogleNode[];
    privateSubnets: string[];
    publicSubnets: string[];
    /**
     * Region of the AWS node group
     */
    region: string;
    /**
     * Volume IOPS of the AWS node group
     */
    volumeIops: number;
    /**
     * Volume size of the AWS node group
     */
    volumeSize: number;
    /**
     * Volume type of the AWS node group
     */
    volumeType: string;
}

export interface ClusterNodeGroupsGoogleNode {
    /**
     * Display name of the node
     */
    displayName: string;
    /**
     * IP address of the node
     */
    ipAddress: string;
    /**
     * Is the node active
     */
    isActive: boolean;
}

export interface DatabaseNode {
    connection?: outputs.DatabaseNodeConnection;
    location?: outputs.DatabaseNodeLocation;
    /**
     * Name of the node
     */
    name?: string;
}

export interface DatabaseNodeConnection {
    /**
     * Database of the node
     */
    database?: string;
    /**
     * Host of the node
     */
    host?: string;
    /**
     * Password of the node
     */
    password?: string;
    /**
     * Port of the node
     */
    port?: number;
    /**
     * Username of the node
     */
    username?: string;
}

export interface DatabaseNodeLocation {
    /**
     * Code of the location
     */
    code?: string;
    /**
     * Country of the location
     */
    country?: string;
    /**
     * Latitude of the location
     */
    latitude?: number;
    /**
     * Longitude of the location
     */
    longitude?: number;
    /**
     * Name of the location
     */
    name?: string;
    /**
     * Region of the location
     */
    region?: string;
}

export interface GetClustersCluster {
    /**
     * Cloud account ID of the cluster
     */
    cloudAccountId: string;
    /**
     * Created at of the cluster
     */
    createdAt: string;
    firewalls: outputs.GetClustersClusterFirewall[];
    /**
     * ID of the cluster
     */
    id: string;
    /**
     * Name of the cluster
     */
    name: string;
    nodeGroups: outputs.GetClustersClusterNodeGroups;
    /**
     * Status of the cluster
     */
    status: string;
}

export interface GetClustersClusterFirewall {
    /**
     * Port for the firewall rule
     */
    port: number;
    /**
     * Sources for the firewall rule
     */
    sources: string[];
    /**
     * Type of the firewall rule
     */
    type: string;
}

export interface GetClustersClusterNodeGroups {
    aws: outputs.GetClustersClusterNodeGroupsAw[];
    azures: outputs.GetClustersClusterNodeGroupsAzure[];
    googles: outputs.GetClustersClusterNodeGroupsGoogle[];
}

export interface GetClustersClusterNodeGroupsAw {
    /**
     * Availability zones of the AWS node group
     */
    availabilityZones: string[];
    /**
     * CIDR of the AWS node group
     */
    cidr: string;
    /**
     * Instance type of the AWS node group
     */
    instanceType: string;
    /**
     * Node location of the AWS node group
     */
    nodeLocation: string;
    nodes: outputs.GetClustersClusterNodeGroupsAwNode[];
    privateSubnets: string[];
    publicSubnets: string[];
    /**
     * Region of the AWS node group
     */
    region: string;
    /**
     * Volume IOPS of the AWS node group
     */
    volumeIops: number;
    /**
     * Volume size of the AWS node group
     */
    volumeSize: number;
    /**
     * Volume type of the AWS node group
     */
    volumeType: string;
}

export interface GetClustersClusterNodeGroupsAwNode {
    /**
     * Display name of the node
     */
    displayName: string;
    /**
     * IP address of the node
     */
    ipAddress: string;
    /**
     * Is the node active
     */
    isActive: boolean;
}

export interface GetClustersClusterNodeGroupsAzure {
    /**
     * Availability zones of the AWS node group
     */
    availabilityZones: string[];
    /**
     * CIDR of the AWS node group
     */
    cidr: string;
    /**
     * Instance type of the AWS node group
     */
    instanceType: string;
    /**
     * Node location of the AWS node group
     */
    nodeLocation: string;
    nodes: outputs.GetClustersClusterNodeGroupsAzureNode[];
    privateSubnets: string[];
    publicSubnets: string[];
    /**
     * Region of the AWS node group
     */
    region: string;
    /**
     * Volume IOPS of the AWS node group
     */
    volumeIops: number;
    /**
     * Volume size of the AWS node group
     */
    volumeSize: number;
    /**
     * Volume type of the AWS node group
     */
    volumeType: string;
}

export interface GetClustersClusterNodeGroupsAzureNode {
    /**
     * Display name of the node
     */
    displayName: string;
    /**
     * IP address of the node
     */
    ipAddress: string;
    /**
     * Is the node active
     */
    isActive: boolean;
}

export interface GetClustersClusterNodeGroupsGoogle {
    /**
     * Availability zones of the AWS node group
     */
    availabilityZones: string[];
    /**
     * CIDR of the AWS node group
     */
    cidr: string;
    /**
     * Instance type of the AWS node group
     */
    instanceType: string;
    /**
     * Node location of the AWS node group
     */
    nodeLocation: string;
    nodes: outputs.GetClustersClusterNodeGroupsGoogleNode[];
    privateSubnets: string[];
    publicSubnets: string[];
    /**
     * Region of the AWS node group
     */
    region: string;
    /**
     * Volume IOPS of the AWS node group
     */
    volumeIops: number;
    /**
     * Volume size of the AWS node group
     */
    volumeSize: number;
    /**
     * Volume type of the AWS node group
     */
    volumeType: string;
}

export interface GetClustersClusterNodeGroupsGoogleNode {
    /**
     * Display name of the node
     */
    displayName: string;
    /**
     * IP address of the node
     */
    ipAddress: string;
    /**
     * Is the node active
     */
    isActive: boolean;
}

export interface GetDatabasesDatabase {
    /**
     * Updated at of the database
     */
    clusterId: string;
    /**
     * Created at of the database
     */
    createdAt: string;
    /**
     * Domain of the database
     */
    domain: string;
    /**
     * ID of the database
     */
    id: string;
    /**
     * Name of the database
     */
    name: string;
    nodes?: outputs.GetDatabasesDatabaseNode[];
    /**
     * Options for creating the database
     */
    options?: string[];
    /**
     * Status of the database
     */
    status: string;
    /**
     * Updated at of the database
     */
    updatedAt: string;
}

export interface GetDatabasesDatabaseNode {
    connection: outputs.GetDatabasesDatabaseNodeConnection;
    location: outputs.GetDatabasesDatabaseNodeLocation;
    /**
     * Name of the database
     */
    name: string;
}

export interface GetDatabasesDatabaseNodeConnection {
    /**
     * Database of the node
     */
    database: string;
    /**
     * Host of the node
     */
    host: string;
    /**
     * Password of the node
     */
    password: string;
    /**
     * Port of the node
     */
    port: number;
    /**
     * Username of the node
     */
    username: string;
}

export interface GetDatabasesDatabaseNodeLocation {
    /**
     * Code of the location
     */
    code: string;
    /**
     * Country of the location
     */
    country: string;
    /**
     * Latitude of the location
     */
    latitude: number;
    /**
     * Longitude of the location
     */
    longitude: number;
    /**
     * Name of the database
     */
    name: string;
    /**
     * Region of the location
     */
    region: string;
}

