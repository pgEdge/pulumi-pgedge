// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BackupStore extends pulumi.CustomResource {
    /**
     * Get an existing BackupStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupStoreState, opts?: pulumi.CustomResourceOptions): BackupStore {
        return new BackupStore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pgedge:index/backupStore:BackupStore';

    /**
     * Returns true if the given object is an instance of BackupStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupStore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupStore.__pulumiType;
    }

    public readonly cloudAccountId!: pulumi.Output<string>;
    public /*out*/ readonly cloudAccountType!: pulumi.Output<string>;
    public /*out*/ readonly clusterIds!: pulumi.Output<string[]>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly properties!: pulumi.Output<{[key: string]: string}>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a BackupStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupStoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupStoreArgs | BackupStoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupStoreState | undefined;
            resourceInputs["cloudAccountId"] = state ? state.cloudAccountId : undefined;
            resourceInputs["cloudAccountType"] = state ? state.cloudAccountType : undefined;
            resourceInputs["clusterIds"] = state ? state.clusterIds : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as BackupStoreArgs | undefined;
            if ((!args || args.cloudAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudAccountId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["cloudAccountId"] = args ? args.cloudAccountId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["cloudAccountType"] = undefined /*out*/;
            resourceInputs["clusterIds"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackupStore.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BackupStore resources.
 */
export interface BackupStoreState {
    cloudAccountId?: pulumi.Input<string>;
    cloudAccountType?: pulumi.Input<string>;
    clusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    createdAt?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    region?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BackupStore resource.
 */
export interface BackupStoreArgs {
    cloudAccountId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region: pulumi.Input<string>;
}
