# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ClusterFirewallRule',
    'ClusterNetwork',
    'ClusterNode',
    'GetClustersClusterResult',
    'GetClustersClusterCloudAccountResult',
    'GetClustersClusterFirewallRuleResult',
    'GetClustersClusterNetworkResult',
    'GetClustersClusterNodeResult',
    'GetDatabasesDatabaseResult',
    'GetDatabasesDatabaseComponentResult',
    'GetDatabasesDatabaseExtensionsResult',
    'GetDatabasesDatabaseNodeResult',
    'GetDatabasesDatabaseNodeConnectionResult',
    'GetDatabasesDatabaseNodeDistanceMeasurementResult',
    'GetDatabasesDatabaseNodeExtensionsResult',
    'GetDatabasesDatabaseNodeExtensionsErrorsResult',
    'GetDatabasesDatabaseNodeLocationResult',
    'GetDatabasesDatabaseNodeRegionResult',
    'GetDatabasesDatabaseRoleResult',
    'GetDatabasesDatabaseTableResult',
    'GetDatabasesDatabaseTableColumnResult',
    'GetDatabasesDatabaseTableStatusResult',
]

@pulumi.output_type
class ClusterFirewallRule(dict):
    def __init__(__self__, *,
                 port: int,
                 sources: Sequence[str]):
        """
        :param int port: Port whose traffic is allowed
        :param Sequence[str] sources: CIDRs and/or IP addresses allowed
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port whose traffic is allowed
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        """
        CIDRs and/or IP addresses allowed
        """
        return pulumi.get(self, "sources")


@pulumi.output_type
class ClusterNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"
        elif key == "privateSubnets":
            suggest = "private_subnets"
        elif key == "publicSubnets":
            suggest = "public_subnets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 cidr: Optional[str] = None,
                 external: Optional[bool] = None,
                 external_id: Optional[str] = None,
                 name: Optional[str] = None,
                 private_subnets: Optional[Sequence[str]] = None,
                 public_subnets: Optional[Sequence[str]] = None):
        """
        :param str region: Region of the network
        :param str cidr: CIDR range for the network
        :param bool external: Is the network externally defined
        :param str external_id: ID of the network, if externally defined
        :param str name: Name of the network
        """
        pulumi.set(__self__, "region", region)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_subnets is not None:
            pulumi.set(__self__, "private_subnets", private_subnets)
        if public_subnets is not None:
            pulumi.set(__self__, "public_subnets", public_subnets)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the network
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        """
        CIDR range for the network
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def external(self) -> Optional[bool]:
        """
        Is the network externally defined
        """
        return pulumi.get(self, "external")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        """
        ID of the network, if externally defined
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the network
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateSubnets")
    def private_subnets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "private_subnets")

    @property
    @pulumi.getter(name="publicSubnets")
    def public_subnets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "public_subnets")


@pulumi.output_type
class ClusterNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "volumeIops":
            suggest = "volume_iops"
        elif key == "volumeSize":
            suggest = "volume_size"
        elif key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 availability_zone: Optional[str] = None,
                 instance_type: Optional[str] = None,
                 name: Optional[str] = None,
                 options: Optional[Sequence[str]] = None,
                 volume_iops: Optional[int] = None,
                 volume_size: Optional[int] = None,
                 volume_type: Optional[str] = None):
        """
        :param str region: Cloud provider region
        :param str availability_zone: Cloud provider availability zone name
        :param str instance_type: Instance type used for the node
        :param str name: Node name
        :param int volume_iops: Volume IOPS of the node data volume
        :param int volume_size: Volume size of the node data volume
        :param str volume_type: Volume type of the node data volume
        """
        pulumi.set(__self__, "region", region)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if volume_iops is not None:
            pulumi.set(__self__, "volume_iops", volume_iops)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Cloud provider region
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        Cloud provider availability zone name
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        Instance type used for the node
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Node name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="volumeIops")
    def volume_iops(self) -> Optional[int]:
        """
        Volume IOPS of the node data volume
        """
        return pulumi.get(self, "volume_iops")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[int]:
        """
        Volume size of the node data volume
        """
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        """
        Volume type of the node data volume
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetClustersClusterResult(dict):
    def __init__(__self__, *,
                 cloud_account: 'outputs.GetClustersClusterCloudAccountResult',
                 cloud_account_id: str,
                 created_at: str,
                 firewall_rules: Sequence['outputs.GetClustersClusterFirewallRuleResult'],
                 id: str,
                 name: str,
                 networks: Sequence['outputs.GetClustersClusterNetworkResult'],
                 node_location: str,
                 nodes: Sequence['outputs.GetClustersClusterNodeResult'],
                 regions: Sequence[str],
                 ssh_key_id: str,
                 status: str):
        """
        :param str cloud_account_id: Cloud account ID of the cluster
        :param str created_at: Created at of the cluster
        :param str id: ID of the cluster
        :param str name: Name of the cluster
        :param str node_location: Node location of the cluster
        :param str ssh_key_id: SSH key ID of the cluster
        :param str status: Status of the cluster
        """
        pulumi.set(__self__, "cloud_account", cloud_account)
        pulumi.set(__self__, "cloud_account_id", cloud_account_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "firewall_rules", firewall_rules)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "networks", networks)
        pulumi.set(__self__, "node_location", node_location)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "ssh_key_id", ssh_key_id)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="cloudAccount")
    def cloud_account(self) -> 'outputs.GetClustersClusterCloudAccountResult':
        return pulumi.get(self, "cloud_account")

    @property
    @pulumi.getter(name="cloudAccountId")
    def cloud_account_id(self) -> str:
        """
        Cloud account ID of the cluster
        """
        return pulumi.get(self, "cloud_account_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Created at of the cluster
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="firewallRules")
    def firewall_rules(self) -> Sequence['outputs.GetClustersClusterFirewallRuleResult']:
        return pulumi.get(self, "firewall_rules")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the cluster
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the cluster
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> Sequence['outputs.GetClustersClusterNetworkResult']:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="nodeLocation")
    def node_location(self) -> str:
        """
        Node location of the cluster
        """
        return pulumi.get(self, "node_location")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetClustersClusterNodeResult']:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def regions(self) -> Sequence[str]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="sshKeyId")
    def ssh_key_id(self) -> str:
        """
        SSH key ID of the cluster
        """
        return pulumi.get(self, "ssh_key_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the cluster
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetClustersClusterCloudAccountResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 type: str):
        """
        :param str id: Display name of the node
        :param str name: IP address of the node
        :param str type: Type of the node
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Display name of the node
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        IP address of the node
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the node
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetClustersClusterFirewallRuleResult(dict):
    def __init__(__self__, *,
                 name: str,
                 port: int,
                 sources: Sequence[str]):
        """
        :param str name: IP address of the node
        :param int port: Port for the firewall rule
        :param Sequence[str] sources: Sources for the firewall rule
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        IP address of the node
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port for the firewall rule
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        """
        Sources for the firewall rule
        """
        return pulumi.get(self, "sources")


@pulumi.output_type
class GetClustersClusterNetworkResult(dict):
    def __init__(__self__, *,
                 cidr: str,
                 external: bool,
                 external_id: str,
                 name: str,
                 private_subnets: Sequence[str],
                 public_subnets: Sequence[str],
                 region: str):
        """
        :param str cidr: CIDR of the AWS node group
        :param bool external: Is the network external
        :param str external_id: External ID of the network
        :param str name: IP address of the node
        :param str region: Region of the network
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "external", external)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_subnets", private_subnets)
        pulumi.set(__self__, "public_subnets", public_subnets)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        CIDR of the AWS node group
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def external(self) -> bool:
        """
        Is the network external
        """
        return pulumi.get(self, "external")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        External ID of the network
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        IP address of the node
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateSubnets")
    def private_subnets(self) -> Sequence[str]:
        return pulumi.get(self, "private_subnets")

    @property
    @pulumi.getter(name="publicSubnets")
    def public_subnets(self) -> Sequence[str]:
        return pulumi.get(self, "public_subnets")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the network
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetClustersClusterNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone: str,
                 instance_type: str,
                 name: str,
                 options: Sequence[str],
                 region: str,
                 volume_iops: int,
                 volume_size: int,
                 volume_type: str):
        """
        :param str availability_zone: Cloud provider availability zone name
        :param str instance_type: Instance type used for the node
        :param str name: IP address of the node
        :param str region: Region of the network
        :param int volume_iops: Volume IOPS of the node data volume
        :param int volume_size: Volume size of the node data volume
        :param str volume_type: Volume type of the node data volume
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "volume_iops", volume_iops)
        pulumi.set(__self__, "volume_size", volume_size)
        pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        Cloud provider availability zone name
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Instance type used for the node
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        IP address of the node
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> Sequence[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the network
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="volumeIops")
    def volume_iops(self) -> int:
        """
        Volume IOPS of the node data volume
        """
        return pulumi.get(self, "volume_iops")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> int:
        """
        Volume size of the node data volume
        """
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        """
        Volume type of the node data volume
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 components: Sequence['outputs.GetDatabasesDatabaseComponentResult'],
                 created_at: str,
                 domain: str,
                 extensions: 'outputs.GetDatabasesDatabaseExtensionsResult',
                 id: str,
                 name: str,
                 options: Sequence[str],
                 pg_version: str,
                 roles: Sequence['outputs.GetDatabasesDatabaseRoleResult'],
                 status: str,
                 storage_used: int,
                 tables: Sequence['outputs.GetDatabasesDatabaseTableResult'],
                 updated_at: str,
                 config_version: Optional[str] = None,
                 nodes: Optional[Sequence['outputs.GetDatabasesDatabaseNodeResult']] = None):
        """
        :param str cluster_id: Updated at of the database
        :param str created_at: Created at of the database
        :param str domain: Domain of the database
        :param str id: ID of the database
        :param str name: Name of the database
        :param Sequence[str] options: Options for creating the database
        :param str pg_version: Postgres version of the database
        :param str status: Status of the database
        :param int storage_used: Storage used of the database
        :param str updated_at: Updated at of the database
        :param str config_version: Config version of the database
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "components", components)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "pg_version", pg_version)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_used", storage_used)
        pulumi.set(__self__, "tables", tables)
        pulumi.set(__self__, "updated_at", updated_at)
        if config_version is not None:
            pulumi.set(__self__, "config_version", config_version)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Updated at of the database
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def components(self) -> Sequence['outputs.GetDatabasesDatabaseComponentResult']:
        return pulumi.get(self, "components")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Created at of the database
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Domain of the database
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def extensions(self) -> 'outputs.GetDatabasesDatabaseExtensionsResult':
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the database
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> Sequence[str]:
        """
        Options for creating the database
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="pgVersion")
    def pg_version(self) -> str:
        """
        Postgres version of the database
        """
        return pulumi.get(self, "pg_version")

    @property
    @pulumi.getter
    def roles(self) -> Sequence['outputs.GetDatabasesDatabaseRoleResult']:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the database
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageUsed")
    def storage_used(self) -> int:
        """
        Storage used of the database
        """
        return pulumi.get(self, "storage_used")

    @property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.GetDatabasesDatabaseTableResult']:
        return pulumi.get(self, "tables")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Updated at of the database
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> Optional[str]:
        """
        Config version of the database
        """
        return pulumi.get(self, "config_version")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.GetDatabasesDatabaseNodeResult']]:
        return pulumi.get(self, "nodes")


@pulumi.output_type
class GetDatabasesDatabaseComponentResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 release_date: str,
                 status: str,
                 version: str):
        """
        :param str id: Id of the component
        :param str name: Name of the component
        :param str release_date: Release date of the component
        :param str status: Status of the component
        :param str version: Version of the component
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "release_date", release_date)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id of the component
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the component
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="releaseDate")
    def release_date(self) -> str:
        """
        Release date of the component
        """
        return pulumi.get(self, "release_date")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the component
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the component
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDatabasesDatabaseExtensionsResult(dict):
    def __init__(__self__, *,
                 auto_manage: bool,
                 availables: Sequence[str],
                 requesteds: Sequence[str]):
        """
        :param bool auto_manage: Auto manage of the extension
        :param Sequence[str] availables: Available of the extension
        :param Sequence[str] requesteds: Requested of the extension
        """
        pulumi.set(__self__, "auto_manage", auto_manage)
        pulumi.set(__self__, "availables", availables)
        pulumi.set(__self__, "requesteds", requesteds)

    @property
    @pulumi.getter(name="autoManage")
    def auto_manage(self) -> bool:
        """
        Auto manage of the extension
        """
        return pulumi.get(self, "auto_manage")

    @property
    @pulumi.getter
    def availables(self) -> Sequence[str]:
        """
        Available of the extension
        """
        return pulumi.get(self, "availables")

    @property
    @pulumi.getter
    def requesteds(self) -> Sequence[str]:
        """
        Requested of the extension
        """
        return pulumi.get(self, "requesteds")


@pulumi.output_type
class GetDatabasesDatabaseNodeResult(dict):
    def __init__(__self__, *,
                 connection: 'outputs.GetDatabasesDatabaseNodeConnectionResult',
                 distance_measurement: 'outputs.GetDatabasesDatabaseNodeDistanceMeasurementResult',
                 extensions: 'outputs.GetDatabasesDatabaseNodeExtensionsResult',
                 location: 'outputs.GetDatabasesDatabaseNodeLocationResult',
                 name: str,
                 region: 'outputs.GetDatabasesDatabaseNodeRegionResult'):
        """
        :param str name: Name of the component
        :param 'GetDatabasesDatabaseNodeRegionArgs' region: Region of the location
        """
        pulumi.set(__self__, "connection", connection)
        pulumi.set(__self__, "distance_measurement", distance_measurement)
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def connection(self) -> 'outputs.GetDatabasesDatabaseNodeConnectionResult':
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter(name="distanceMeasurement")
    def distance_measurement(self) -> 'outputs.GetDatabasesDatabaseNodeDistanceMeasurementResult':
        return pulumi.get(self, "distance_measurement")

    @property
    @pulumi.getter
    def extensions(self) -> 'outputs.GetDatabasesDatabaseNodeExtensionsResult':
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def location(self) -> 'outputs.GetDatabasesDatabaseNodeLocationResult':
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the component
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> 'outputs.GetDatabasesDatabaseNodeRegionResult':
        """
        Region of the location
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetDatabasesDatabaseNodeConnectionResult(dict):
    def __init__(__self__, *,
                 database: str,
                 external_ip_address: str,
                 host: str,
                 internal_host: str,
                 internal_ip_address: str,
                 password: str,
                 port: int,
                 username: str):
        """
        :param str database: Database of the node
        :param str external_ip_address: External IP of the node
        :param str host: Host of the node
        :param str internal_host: Internal Host of the node
        :param str internal_ip_address: Internal IP of the node
        :param str password: Password of the node
        :param int port: Port of the node
        :param str username: Username of the node
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "external_ip_address", external_ip_address)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "internal_host", internal_host)
        pulumi.set(__self__, "internal_ip_address", internal_ip_address)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        Database of the node
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="externalIpAddress")
    def external_ip_address(self) -> str:
        """
        External IP of the node
        """
        return pulumi.get(self, "external_ip_address")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Host of the node
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="internalHost")
    def internal_host(self) -> str:
        """
        Internal Host of the node
        """
        return pulumi.get(self, "internal_host")

    @property
    @pulumi.getter(name="internalIpAddress")
    def internal_ip_address(self) -> str:
        """
        Internal IP of the node
        """
        return pulumi.get(self, "internal_ip_address")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password of the node
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port of the node
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username of the node
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDatabasesDatabaseNodeDistanceMeasurementResult(dict):
    def __init__(__self__, *,
                 distance: float,
                 from_latitude: float,
                 from_longitude: float,
                 unit: str):
        """
        :param float distance: Distance from a reference point
        :param float from_latitude: Latitude of the reference point
        :param float from_longitude: Longitude of the reference point
        :param str unit: Unit of distance measurement
        """
        pulumi.set(__self__, "distance", distance)
        pulumi.set(__self__, "from_latitude", from_latitude)
        pulumi.set(__self__, "from_longitude", from_longitude)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def distance(self) -> float:
        """
        Distance from a reference point
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter(name="fromLatitude")
    def from_latitude(self) -> float:
        """
        Latitude of the reference point
        """
        return pulumi.get(self, "from_latitude")

    @property
    @pulumi.getter(name="fromLongitude")
    def from_longitude(self) -> float:
        """
        Longitude of the reference point
        """
        return pulumi.get(self, "from_longitude")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        Unit of distance measurement
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetDatabasesDatabaseNodeExtensionsResult(dict):
    def __init__(__self__, *,
                 errors: 'outputs.GetDatabasesDatabaseNodeExtensionsErrorsResult',
                 installeds: Sequence[str]):
        """
        :param Sequence[str] installeds: List of installed extensions
        """
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "installeds", installeds)

    @property
    @pulumi.getter
    def errors(self) -> 'outputs.GetDatabasesDatabaseNodeExtensionsErrorsResult':
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def installeds(self) -> Sequence[str]:
        """
        List of installed extensions
        """
        return pulumi.get(self, "installeds")


@pulumi.output_type
class GetDatabasesDatabaseNodeExtensionsErrorsResult(dict):
    def __init__(__self__, *,
                 anim9ef: str,
                 enim3b: str,
                 laborumd: str,
                 mollit267: str):
        """
        :param str anim9ef: Error code anim9ef
        :param str enim3b: Error code enim3b
        :param str laborumd: Error code laborumd
        :param str mollit267: Error code mollit267
        """
        pulumi.set(__self__, "anim9ef", anim9ef)
        pulumi.set(__self__, "enim3b", enim3b)
        pulumi.set(__self__, "laborumd", laborumd)
        pulumi.set(__self__, "mollit267", mollit267)

    @property
    @pulumi.getter
    def anim9ef(self) -> str:
        """
        Error code anim9ef
        """
        return pulumi.get(self, "anim9ef")

    @property
    @pulumi.getter
    def enim3b(self) -> str:
        """
        Error code enim3b
        """
        return pulumi.get(self, "enim3b")

    @property
    @pulumi.getter
    def laborumd(self) -> str:
        """
        Error code laborumd
        """
        return pulumi.get(self, "laborumd")

    @property
    @pulumi.getter
    def mollit267(self) -> str:
        """
        Error code mollit267
        """
        return pulumi.get(self, "mollit267")


@pulumi.output_type
class GetDatabasesDatabaseNodeLocationResult(dict):
    def __init__(__self__, *,
                 city: str,
                 code: str,
                 country: str,
                 latitude: float,
                 longitude: float,
                 metro_code: str,
                 name: str,
                 postal_code: str,
                 region: str,
                 region_code: str,
                 timezone: str):
        """
        :param str city: City of the location
        :param str code: Code of the location
        :param str country: Country of the location
        :param float latitude: Latitude of the location
        :param float longitude: Longitude of the location
        :param str metro_code: Metro code of the location
        :param str name: Name of the component
        :param str postal_code: Postal code of the location
        :param str region: Region of the location
        :param str region_code: Region code of the location
        :param str timezone: Timezone of the location
        """
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "region_code", region_code)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def city(self) -> str:
        """
        City of the location
        """
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Code of the location
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def country(self) -> str:
        """
        Country of the location
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def latitude(self) -> float:
        """
        Latitude of the location
        """
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        """
        Longitude of the location
        """
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Metro code of the location
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the component
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        """
        Postal code of the location
        """
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the location
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> str:
        """
        Region code of the location
        """
        return pulumi.get(self, "region_code")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        Timezone of the location
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetDatabasesDatabaseNodeRegionResult(dict):
    def __init__(__self__, *,
                 active: bool,
                 availability_zones: Sequence[str],
                 cloud: str,
                 code: str,
                 name: str,
                 parent: str):
        """
        :param bool active: Active status of the region
        :param Sequence[str] availability_zones: Availability zones of the region
        :param str cloud: Cloud provider of the region
        :param str code: Code of the location
        :param str name: Name of the component
        :param str parent: Parent region
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "cloud", cloud)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Active status of the region
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[str]:
        """
        Availability zones of the region
        """
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter
    def cloud(self) -> str:
        """
        Cloud provider of the region
        """
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Code of the location
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the component
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Parent region
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetDatabasesDatabaseRoleResult(dict):
    def __init__(__self__, *,
                 bypass_rls: bool,
                 connection_limit: int,
                 create_db: bool,
                 create_role: bool,
                 inherit: bool,
                 login: bool,
                 name: str,
                 replication: bool,
                 superuser: bool):
        """
        :param bool bypass_rls: Bypass RLS
        :param int connection_limit: Connection limit
        :param bool create_db: Create database
        :param bool create_role: Create role
        :param bool inherit: Inherit
        :param bool login: Login
        :param str name: Name of the component
        :param bool replication: Replication
        :param bool superuser: Superuser
        """
        pulumi.set(__self__, "bypass_rls", bypass_rls)
        pulumi.set(__self__, "connection_limit", connection_limit)
        pulumi.set(__self__, "create_db", create_db)
        pulumi.set(__self__, "create_role", create_role)
        pulumi.set(__self__, "inherit", inherit)
        pulumi.set(__self__, "login", login)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "replication", replication)
        pulumi.set(__self__, "superuser", superuser)

    @property
    @pulumi.getter(name="bypassRls")
    def bypass_rls(self) -> bool:
        """
        Bypass RLS
        """
        return pulumi.get(self, "bypass_rls")

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> int:
        """
        Connection limit
        """
        return pulumi.get(self, "connection_limit")

    @property
    @pulumi.getter(name="createDb")
    def create_db(self) -> bool:
        """
        Create database
        """
        return pulumi.get(self, "create_db")

    @property
    @pulumi.getter(name="createRole")
    def create_role(self) -> bool:
        """
        Create role
        """
        return pulumi.get(self, "create_role")

    @property
    @pulumi.getter
    def inherit(self) -> bool:
        """
        Inherit
        """
        return pulumi.get(self, "inherit")

    @property
    @pulumi.getter
    def login(self) -> bool:
        """
        Login
        """
        return pulumi.get(self, "login")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the component
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def replication(self) -> bool:
        """
        Replication
        """
        return pulumi.get(self, "replication")

    @property
    @pulumi.getter
    def superuser(self) -> bool:
        """
        Superuser
        """
        return pulumi.get(self, "superuser")


@pulumi.output_type
class GetDatabasesDatabaseTableResult(dict):
    def __init__(__self__, *,
                 columns: Sequence['outputs.GetDatabasesDatabaseTableColumnResult'],
                 name: str,
                 primary_keys: Sequence[str],
                 replication_sets: Sequence[str],
                 schema: str,
                 statuses: Sequence['outputs.GetDatabasesDatabaseTableStatusResult']):
        """
        :param str name: Name of the component
        :param Sequence[str] primary_keys: Primary key of the table
        :param Sequence[str] replication_sets: Replication sets of the table
        :param str schema: Schema of the table
        :param Sequence['GetDatabasesDatabaseTableStatusArgs'] statuses: Status of the component
        """
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_keys", primary_keys)
        pulumi.set(__self__, "replication_sets", replication_sets)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter
    def columns(self) -> Sequence['outputs.GetDatabasesDatabaseTableColumnResult']:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the component
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryKeys")
    def primary_keys(self) -> Sequence[str]:
        """
        Primary key of the table
        """
        return pulumi.get(self, "primary_keys")

    @property
    @pulumi.getter(name="replicationSets")
    def replication_sets(self) -> Sequence[str]:
        """
        Replication sets of the table
        """
        return pulumi.get(self, "replication_sets")

    @property
    @pulumi.getter
    def schema(self) -> str:
        """
        Schema of the table
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetDatabasesDatabaseTableStatusResult']:
        """
        Status of the component
        """
        return pulumi.get(self, "statuses")


@pulumi.output_type
class GetDatabasesDatabaseTableColumnResult(dict):
    def __init__(__self__, *,
                 data_type: str,
                 default: str,
                 is_nullable: bool,
                 is_primary_key: bool,
                 name: str,
                 ordinal_position: int):
        """
        :param str data_type: Data type of the column
        :param str default: Default of the column
        :param bool is_nullable: Is nullable of the column
        :param bool is_primary_key: Is primary key of the column
        :param str name: Name of the component
        :param int ordinal_position: Ordinal position of the column
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "is_nullable", is_nullable)
        pulumi.set(__self__, "is_primary_key", is_primary_key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ordinal_position", ordinal_position)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        Data type of the column
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        Default of the column
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="isNullable")
    def is_nullable(self) -> bool:
        """
        Is nullable of the column
        """
        return pulumi.get(self, "is_nullable")

    @property
    @pulumi.getter(name="isPrimaryKey")
    def is_primary_key(self) -> bool:
        """
        Is primary key of the column
        """
        return pulumi.get(self, "is_primary_key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the component
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ordinalPosition")
    def ordinal_position(self) -> int:
        """
        Ordinal position of the column
        """
        return pulumi.get(self, "ordinal_position")


@pulumi.output_type
class GetDatabasesDatabaseTableStatusResult(dict):
    def __init__(__self__, *,
                 aligned: bool,
                 node_name: str,
                 present: bool,
                 replicating: bool):
        """
        :param bool aligned: Aligned of the table
        :param str node_name: Node name of the table
        :param bool present: Present of the table
        :param bool replicating: Replicating of the table
        """
        pulumi.set(__self__, "aligned", aligned)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "present", present)
        pulumi.set(__self__, "replicating", replicating)

    @property
    @pulumi.getter
    def aligned(self) -> bool:
        """
        Aligned of the table
        """
        return pulumi.get(self, "aligned")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> str:
        """
        Node name of the table
        """
        return pulumi.get(self, "node_name")

    @property
    @pulumi.getter
    def present(self) -> bool:
        """
        Present of the table
        """
        return pulumi.get(self, "present")

    @property
    @pulumi.getter
    def replicating(self) -> bool:
        """
        Replicating of the table
        """
        return pulumi.get(self, "replicating")


