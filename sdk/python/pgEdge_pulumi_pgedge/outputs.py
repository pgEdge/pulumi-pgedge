# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ClusterFirewall',
    'ClusterNodeGroups',
    'ClusterNodeGroupsAw',
    'ClusterNodeGroupsAwNode',
    'ClusterNodeGroupsAzure',
    'ClusterNodeGroupsAzureNode',
    'ClusterNodeGroupsGoogle',
    'ClusterNodeGroupsGoogleNode',
    'DatabaseNode',
    'DatabaseNodeConnection',
    'DatabaseNodeLocation',
    'GetClustersClusterResult',
    'GetClustersClusterFirewallResult',
    'GetClustersClusterNodeGroupsResult',
    'GetClustersClusterNodeGroupsAwResult',
    'GetClustersClusterNodeGroupsAwNodeResult',
    'GetClustersClusterNodeGroupsAzureResult',
    'GetClustersClusterNodeGroupsAzureNodeResult',
    'GetClustersClusterNodeGroupsGoogleResult',
    'GetClustersClusterNodeGroupsGoogleNodeResult',
    'GetDatabasesDatabaseResult',
    'GetDatabasesDatabaseNodeResult',
    'GetDatabasesDatabaseNodeConnectionResult',
    'GetDatabasesDatabaseNodeLocationResult',
]

@pulumi.output_type
class ClusterFirewall(dict):
    def __init__(__self__, *,
                 port: Optional[int] = None,
                 sources: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param int port: Port for the firewall rule
        :param Sequence[str] sources: Sources for the firewall rule
        :param str type: Type of the firewall rule
        """
        if port is not None:
            pulumi.set(__self__, "port", port)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port for the firewall rule
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence[str]]:
        """
        Sources for the firewall rule
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the firewall rule
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ClusterNodeGroups(dict):
    def __init__(__self__, *,
                 aws: Optional[Sequence['outputs.ClusterNodeGroupsAw']] = None,
                 azures: Optional[Sequence['outputs.ClusterNodeGroupsAzure']] = None,
                 googles: Optional[Sequence['outputs.ClusterNodeGroupsGoogle']] = None):
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azures is not None:
            pulumi.set(__self__, "azures", azures)
        if googles is not None:
            pulumi.set(__self__, "googles", googles)

    @property
    @pulumi.getter
    def aws(self) -> Optional[Sequence['outputs.ClusterNodeGroupsAw']]:
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter
    def azures(self) -> Optional[Sequence['outputs.ClusterNodeGroupsAzure']]:
        return pulumi.get(self, "azures")

    @property
    @pulumi.getter
    def googles(self) -> Optional[Sequence['outputs.ClusterNodeGroupsGoogle']]:
        return pulumi.get(self, "googles")


@pulumi.output_type
class ClusterNodeGroupsAw(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZones":
            suggest = "availability_zones"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "nodeLocation":
            suggest = "node_location"
        elif key == "privateSubnets":
            suggest = "private_subnets"
        elif key == "publicSubnets":
            suggest = "public_subnets"
        elif key == "volumeIops":
            suggest = "volume_iops"
        elif key == "volumeSize":
            suggest = "volume_size"
        elif key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNodeGroupsAw. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNodeGroupsAw.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNodeGroupsAw.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zones: Optional[Sequence[str]] = None,
                 cidr: Optional[str] = None,
                 instance_type: Optional[str] = None,
                 node_location: Optional[str] = None,
                 nodes: Optional[Sequence['outputs.ClusterNodeGroupsAwNode']] = None,
                 private_subnets: Optional[Sequence[str]] = None,
                 public_subnets: Optional[Sequence[str]] = None,
                 region: Optional[str] = None,
                 volume_iops: Optional[int] = None,
                 volume_size: Optional[int] = None,
                 volume_type: Optional[str] = None):
        """
        :param Sequence[str] availability_zones: Availability zones of the AWS node group
        :param str cidr: CIDR of the AWS node group
        :param str instance_type: Instance type of the AWS node group
        :param str node_location: Node location of the AWS node group
        :param str region: Region of the AWS node group
        :param int volume_iops: Volume IOPS of the AWS node group
        :param int volume_size: Volume size of the AWS node group
        :param str volume_type: Volume type of the AWS node group
        """
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if node_location is not None:
            pulumi.set(__self__, "node_location", node_location)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if private_subnets is not None:
            pulumi.set(__self__, "private_subnets", private_subnets)
        if public_subnets is not None:
            pulumi.set(__self__, "public_subnets", public_subnets)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if volume_iops is not None:
            pulumi.set(__self__, "volume_iops", volume_iops)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[Sequence[str]]:
        """
        Availability zones of the AWS node group
        """
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        """
        CIDR of the AWS node group
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        Instance type of the AWS node group
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="nodeLocation")
    def node_location(self) -> Optional[str]:
        """
        Node location of the AWS node group
        """
        return pulumi.get(self, "node_location")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.ClusterNodeGroupsAwNode']]:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="privateSubnets")
    def private_subnets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "private_subnets")

    @property
    @pulumi.getter(name="publicSubnets")
    def public_subnets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "public_subnets")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Region of the AWS node group
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="volumeIops")
    def volume_iops(self) -> Optional[int]:
        """
        Volume IOPS of the AWS node group
        """
        return pulumi.get(self, "volume_iops")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[int]:
        """
        Volume size of the AWS node group
        """
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        """
        Volume type of the AWS node group
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class ClusterNodeGroupsAwNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "isActive":
            suggest = "is_active"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNodeGroupsAwNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNodeGroupsAwNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNodeGroupsAwNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 is_active: Optional[bool] = None):
        """
        :param str display_name: Display name of the node
        :param str ip_address: IP address of the node
        :param bool is_active: Is the node active
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Display name of the node
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        IP address of the node
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[bool]:
        """
        Is the node active
        """
        return pulumi.get(self, "is_active")


@pulumi.output_type
class ClusterNodeGroupsAzure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZones":
            suggest = "availability_zones"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "nodeLocation":
            suggest = "node_location"
        elif key == "privateSubnets":
            suggest = "private_subnets"
        elif key == "publicSubnets":
            suggest = "public_subnets"
        elif key == "volumeIops":
            suggest = "volume_iops"
        elif key == "volumeSize":
            suggest = "volume_size"
        elif key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNodeGroupsAzure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNodeGroupsAzure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNodeGroupsAzure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zones: Optional[Sequence[str]] = None,
                 cidr: Optional[str] = None,
                 instance_type: Optional[str] = None,
                 node_location: Optional[str] = None,
                 nodes: Optional[Sequence['outputs.ClusterNodeGroupsAzureNode']] = None,
                 private_subnets: Optional[Sequence[str]] = None,
                 public_subnets: Optional[Sequence[str]] = None,
                 region: Optional[str] = None,
                 volume_iops: Optional[int] = None,
                 volume_size: Optional[int] = None,
                 volume_type: Optional[str] = None):
        """
        :param Sequence[str] availability_zones: Availability zones of the AWS node group
        :param str cidr: CIDR of the AWS node group
        :param str instance_type: Instance type of the AWS node group
        :param str node_location: Node location of the AWS node group
        :param str region: Region of the AWS node group
        :param int volume_iops: Volume IOPS of the AWS node group
        :param int volume_size: Volume size of the AWS node group
        :param str volume_type: Volume type of the AWS node group
        """
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if node_location is not None:
            pulumi.set(__self__, "node_location", node_location)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if private_subnets is not None:
            pulumi.set(__self__, "private_subnets", private_subnets)
        if public_subnets is not None:
            pulumi.set(__self__, "public_subnets", public_subnets)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if volume_iops is not None:
            pulumi.set(__self__, "volume_iops", volume_iops)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[Sequence[str]]:
        """
        Availability zones of the AWS node group
        """
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        """
        CIDR of the AWS node group
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        Instance type of the AWS node group
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="nodeLocation")
    def node_location(self) -> Optional[str]:
        """
        Node location of the AWS node group
        """
        return pulumi.get(self, "node_location")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.ClusterNodeGroupsAzureNode']]:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="privateSubnets")
    def private_subnets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "private_subnets")

    @property
    @pulumi.getter(name="publicSubnets")
    def public_subnets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "public_subnets")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Region of the AWS node group
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="volumeIops")
    def volume_iops(self) -> Optional[int]:
        """
        Volume IOPS of the AWS node group
        """
        return pulumi.get(self, "volume_iops")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[int]:
        """
        Volume size of the AWS node group
        """
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        """
        Volume type of the AWS node group
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class ClusterNodeGroupsAzureNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "isActive":
            suggest = "is_active"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNodeGroupsAzureNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNodeGroupsAzureNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNodeGroupsAzureNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 is_active: Optional[bool] = None):
        """
        :param str display_name: Display name of the node
        :param str ip_address: IP address of the node
        :param bool is_active: Is the node active
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Display name of the node
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        IP address of the node
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[bool]:
        """
        Is the node active
        """
        return pulumi.get(self, "is_active")


@pulumi.output_type
class ClusterNodeGroupsGoogle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZones":
            suggest = "availability_zones"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "nodeLocation":
            suggest = "node_location"
        elif key == "privateSubnets":
            suggest = "private_subnets"
        elif key == "publicSubnets":
            suggest = "public_subnets"
        elif key == "volumeIops":
            suggest = "volume_iops"
        elif key == "volumeSize":
            suggest = "volume_size"
        elif key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNodeGroupsGoogle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNodeGroupsGoogle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNodeGroupsGoogle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zones: Optional[Sequence[str]] = None,
                 cidr: Optional[str] = None,
                 instance_type: Optional[str] = None,
                 node_location: Optional[str] = None,
                 nodes: Optional[Sequence['outputs.ClusterNodeGroupsGoogleNode']] = None,
                 private_subnets: Optional[Sequence[str]] = None,
                 public_subnets: Optional[Sequence[str]] = None,
                 region: Optional[str] = None,
                 volume_iops: Optional[int] = None,
                 volume_size: Optional[int] = None,
                 volume_type: Optional[str] = None):
        """
        :param Sequence[str] availability_zones: Availability zones of the AWS node group
        :param str cidr: CIDR of the AWS node group
        :param str instance_type: Instance type of the AWS node group
        :param str node_location: Node location of the AWS node group
        :param str region: Region of the AWS node group
        :param int volume_iops: Volume IOPS of the AWS node group
        :param int volume_size: Volume size of the AWS node group
        :param str volume_type: Volume type of the AWS node group
        """
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if node_location is not None:
            pulumi.set(__self__, "node_location", node_location)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if private_subnets is not None:
            pulumi.set(__self__, "private_subnets", private_subnets)
        if public_subnets is not None:
            pulumi.set(__self__, "public_subnets", public_subnets)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if volume_iops is not None:
            pulumi.set(__self__, "volume_iops", volume_iops)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[Sequence[str]]:
        """
        Availability zones of the AWS node group
        """
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        """
        CIDR of the AWS node group
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        Instance type of the AWS node group
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="nodeLocation")
    def node_location(self) -> Optional[str]:
        """
        Node location of the AWS node group
        """
        return pulumi.get(self, "node_location")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.ClusterNodeGroupsGoogleNode']]:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="privateSubnets")
    def private_subnets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "private_subnets")

    @property
    @pulumi.getter(name="publicSubnets")
    def public_subnets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "public_subnets")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Region of the AWS node group
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="volumeIops")
    def volume_iops(self) -> Optional[int]:
        """
        Volume IOPS of the AWS node group
        """
        return pulumi.get(self, "volume_iops")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[int]:
        """
        Volume size of the AWS node group
        """
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        """
        Volume type of the AWS node group
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class ClusterNodeGroupsGoogleNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "isActive":
            suggest = "is_active"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNodeGroupsGoogleNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNodeGroupsGoogleNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNodeGroupsGoogleNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 is_active: Optional[bool] = None):
        """
        :param str display_name: Display name of the node
        :param str ip_address: IP address of the node
        :param bool is_active: Is the node active
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Display name of the node
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        IP address of the node
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[bool]:
        """
        Is the node active
        """
        return pulumi.get(self, "is_active")


@pulumi.output_type
class DatabaseNode(dict):
    def __init__(__self__, *,
                 connection: Optional['outputs.DatabaseNodeConnection'] = None,
                 location: Optional['outputs.DatabaseNodeLocation'] = None,
                 name: Optional[str] = None):
        """
        :param str name: Name of the node
        """
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def connection(self) -> Optional['outputs.DatabaseNodeConnection']:
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter
    def location(self) -> Optional['outputs.DatabaseNodeLocation']:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the node
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DatabaseNodeConnection(dict):
    def __init__(__self__, *,
                 database: Optional[str] = None,
                 host: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 username: Optional[str] = None):
        """
        :param str database: Database of the node
        :param str host: Host of the node
        :param str password: Password of the node
        :param int port: Port of the node
        :param str username: Username of the node
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Database of the node
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host of the node
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password of the node
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port of the node
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username of the node
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class DatabaseNodeLocation(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 country: Optional[str] = None,
                 latitude: Optional[float] = None,
                 longitude: Optional[float] = None,
                 name: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str code: Code of the location
        :param str country: Country of the location
        :param float latitude: Latitude of the location
        :param float longitude: Longitude of the location
        :param str name: Name of the location
        :param str region: Region of the location
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        Code of the location
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        """
        Country of the location
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def latitude(self) -> Optional[float]:
        """
        Latitude of the location
        """
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> Optional[float]:
        """
        Longitude of the location
        """
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the location
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Region of the location
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetClustersClusterResult(dict):
    def __init__(__self__, *,
                 cloud_account_id: str,
                 created_at: str,
                 firewalls: Sequence['outputs.GetClustersClusterFirewallResult'],
                 id: str,
                 name: str,
                 node_groups: 'outputs.GetClustersClusterNodeGroupsResult',
                 status: str):
        """
        :param str cloud_account_id: Cloud account ID of the cluster
        :param str created_at: Created at of the cluster
        :param str id: ID of the cluster
        :param str name: Name of the cluster
        :param str status: Status of the cluster
        """
        pulumi.set(__self__, "cloud_account_id", cloud_account_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "firewalls", firewalls)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_groups", node_groups)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="cloudAccountId")
    def cloud_account_id(self) -> str:
        """
        Cloud account ID of the cluster
        """
        return pulumi.get(self, "cloud_account_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Created at of the cluster
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def firewalls(self) -> Sequence['outputs.GetClustersClusterFirewallResult']:
        return pulumi.get(self, "firewalls")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the cluster
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the cluster
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeGroups")
    def node_groups(self) -> 'outputs.GetClustersClusterNodeGroupsResult':
        return pulumi.get(self, "node_groups")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the cluster
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetClustersClusterFirewallResult(dict):
    def __init__(__self__, *,
                 port: int,
                 sources: Sequence[str],
                 type: str):
        """
        :param int port: Port for the firewall rule
        :param Sequence[str] sources: Sources for the firewall rule
        :param str type: Type of the firewall rule
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port for the firewall rule
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def sources(self) -> Sequence[str]:
        """
        Sources for the firewall rule
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the firewall rule
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetClustersClusterNodeGroupsResult(dict):
    def __init__(__self__, *,
                 aws: Sequence['outputs.GetClustersClusterNodeGroupsAwResult'],
                 azures: Sequence['outputs.GetClustersClusterNodeGroupsAzureResult'],
                 googles: Sequence['outputs.GetClustersClusterNodeGroupsGoogleResult']):
        pulumi.set(__self__, "aws", aws)
        pulumi.set(__self__, "azures", azures)
        pulumi.set(__self__, "googles", googles)

    @property
    @pulumi.getter
    def aws(self) -> Sequence['outputs.GetClustersClusterNodeGroupsAwResult']:
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter
    def azures(self) -> Sequence['outputs.GetClustersClusterNodeGroupsAzureResult']:
        return pulumi.get(self, "azures")

    @property
    @pulumi.getter
    def googles(self) -> Sequence['outputs.GetClustersClusterNodeGroupsGoogleResult']:
        return pulumi.get(self, "googles")


@pulumi.output_type
class GetClustersClusterNodeGroupsAwResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[str],
                 cidr: str,
                 instance_type: str,
                 node_location: str,
                 nodes: Sequence['outputs.GetClustersClusterNodeGroupsAwNodeResult'],
                 private_subnets: Sequence[str],
                 public_subnets: Sequence[str],
                 region: str,
                 volume_iops: int,
                 volume_size: int,
                 volume_type: str):
        """
        :param Sequence[str] availability_zones: Availability zones of the AWS node group
        :param str cidr: CIDR of the AWS node group
        :param str instance_type: Instance type of the AWS node group
        :param str node_location: Node location of the AWS node group
        :param str region: Region of the AWS node group
        :param int volume_iops: Volume IOPS of the AWS node group
        :param int volume_size: Volume size of the AWS node group
        :param str volume_type: Volume type of the AWS node group
        """
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "node_location", node_location)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "private_subnets", private_subnets)
        pulumi.set(__self__, "public_subnets", public_subnets)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "volume_iops", volume_iops)
        pulumi.set(__self__, "volume_size", volume_size)
        pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[str]:
        """
        Availability zones of the AWS node group
        """
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        CIDR of the AWS node group
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Instance type of the AWS node group
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="nodeLocation")
    def node_location(self) -> str:
        """
        Node location of the AWS node group
        """
        return pulumi.get(self, "node_location")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetClustersClusterNodeGroupsAwNodeResult']:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="privateSubnets")
    def private_subnets(self) -> Sequence[str]:
        return pulumi.get(self, "private_subnets")

    @property
    @pulumi.getter(name="publicSubnets")
    def public_subnets(self) -> Sequence[str]:
        return pulumi.get(self, "public_subnets")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the AWS node group
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="volumeIops")
    def volume_iops(self) -> int:
        """
        Volume IOPS of the AWS node group
        """
        return pulumi.get(self, "volume_iops")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> int:
        """
        Volume size of the AWS node group
        """
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        """
        Volume type of the AWS node group
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetClustersClusterNodeGroupsAwNodeResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 ip_address: str,
                 is_active: bool):
        """
        :param str display_name: Display name of the node
        :param str ip_address: IP address of the node
        :param bool is_active: Is the node active
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "is_active", is_active)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name of the node
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        IP address of the node
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        """
        Is the node active
        """
        return pulumi.get(self, "is_active")


@pulumi.output_type
class GetClustersClusterNodeGroupsAzureResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[str],
                 cidr: str,
                 instance_type: str,
                 node_location: str,
                 nodes: Sequence['outputs.GetClustersClusterNodeGroupsAzureNodeResult'],
                 private_subnets: Sequence[str],
                 public_subnets: Sequence[str],
                 region: str,
                 volume_iops: int,
                 volume_size: int,
                 volume_type: str):
        """
        :param Sequence[str] availability_zones: Availability zones of the AWS node group
        :param str cidr: CIDR of the AWS node group
        :param str instance_type: Instance type of the AWS node group
        :param str node_location: Node location of the AWS node group
        :param str region: Region of the AWS node group
        :param int volume_iops: Volume IOPS of the AWS node group
        :param int volume_size: Volume size of the AWS node group
        :param str volume_type: Volume type of the AWS node group
        """
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "node_location", node_location)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "private_subnets", private_subnets)
        pulumi.set(__self__, "public_subnets", public_subnets)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "volume_iops", volume_iops)
        pulumi.set(__self__, "volume_size", volume_size)
        pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[str]:
        """
        Availability zones of the AWS node group
        """
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        CIDR of the AWS node group
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Instance type of the AWS node group
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="nodeLocation")
    def node_location(self) -> str:
        """
        Node location of the AWS node group
        """
        return pulumi.get(self, "node_location")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetClustersClusterNodeGroupsAzureNodeResult']:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="privateSubnets")
    def private_subnets(self) -> Sequence[str]:
        return pulumi.get(self, "private_subnets")

    @property
    @pulumi.getter(name="publicSubnets")
    def public_subnets(self) -> Sequence[str]:
        return pulumi.get(self, "public_subnets")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the AWS node group
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="volumeIops")
    def volume_iops(self) -> int:
        """
        Volume IOPS of the AWS node group
        """
        return pulumi.get(self, "volume_iops")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> int:
        """
        Volume size of the AWS node group
        """
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        """
        Volume type of the AWS node group
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetClustersClusterNodeGroupsAzureNodeResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 ip_address: str,
                 is_active: bool):
        """
        :param str display_name: Display name of the node
        :param str ip_address: IP address of the node
        :param bool is_active: Is the node active
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "is_active", is_active)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name of the node
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        IP address of the node
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        """
        Is the node active
        """
        return pulumi.get(self, "is_active")


@pulumi.output_type
class GetClustersClusterNodeGroupsGoogleResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[str],
                 cidr: str,
                 instance_type: str,
                 node_location: str,
                 nodes: Sequence['outputs.GetClustersClusterNodeGroupsGoogleNodeResult'],
                 private_subnets: Sequence[str],
                 public_subnets: Sequence[str],
                 region: str,
                 volume_iops: int,
                 volume_size: int,
                 volume_type: str):
        """
        :param Sequence[str] availability_zones: Availability zones of the AWS node group
        :param str cidr: CIDR of the AWS node group
        :param str instance_type: Instance type of the AWS node group
        :param str node_location: Node location of the AWS node group
        :param str region: Region of the AWS node group
        :param int volume_iops: Volume IOPS of the AWS node group
        :param int volume_size: Volume size of the AWS node group
        :param str volume_type: Volume type of the AWS node group
        """
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "node_location", node_location)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "private_subnets", private_subnets)
        pulumi.set(__self__, "public_subnets", public_subnets)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "volume_iops", volume_iops)
        pulumi.set(__self__, "volume_size", volume_size)
        pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[str]:
        """
        Availability zones of the AWS node group
        """
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        CIDR of the AWS node group
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Instance type of the AWS node group
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="nodeLocation")
    def node_location(self) -> str:
        """
        Node location of the AWS node group
        """
        return pulumi.get(self, "node_location")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetClustersClusterNodeGroupsGoogleNodeResult']:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="privateSubnets")
    def private_subnets(self) -> Sequence[str]:
        return pulumi.get(self, "private_subnets")

    @property
    @pulumi.getter(name="publicSubnets")
    def public_subnets(self) -> Sequence[str]:
        return pulumi.get(self, "public_subnets")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the AWS node group
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="volumeIops")
    def volume_iops(self) -> int:
        """
        Volume IOPS of the AWS node group
        """
        return pulumi.get(self, "volume_iops")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> int:
        """
        Volume size of the AWS node group
        """
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        """
        Volume type of the AWS node group
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetClustersClusterNodeGroupsGoogleNodeResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 ip_address: str,
                 is_active: bool):
        """
        :param str display_name: Display name of the node
        :param str ip_address: IP address of the node
        :param bool is_active: Is the node active
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "is_active", is_active)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name of the node
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        IP address of the node
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        """
        Is the node active
        """
        return pulumi.get(self, "is_active")


@pulumi.output_type
class GetDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 created_at: str,
                 domain: str,
                 id: str,
                 name: str,
                 status: str,
                 updated_at: str,
                 nodes: Optional[Sequence['outputs.GetDatabasesDatabaseNodeResult']] = None,
                 options: Optional[Sequence[str]] = None):
        """
        :param str cluster_id: Updated at of the database
        :param str created_at: Created at of the database
        :param str domain: Domain of the database
        :param str id: ID of the database
        :param str name: Name of the database
        :param str status: Status of the database
        :param str updated_at: Updated at of the database
        :param Sequence[str] options: Options for creating the database
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Updated at of the database
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Created at of the database
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Domain of the database
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the database
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the database
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Updated at of the database
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.GetDatabasesDatabaseNodeResult']]:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence[str]]:
        """
        Options for creating the database
        """
        return pulumi.get(self, "options")


@pulumi.output_type
class GetDatabasesDatabaseNodeResult(dict):
    def __init__(__self__, *,
                 connection: 'outputs.GetDatabasesDatabaseNodeConnectionResult',
                 location: 'outputs.GetDatabasesDatabaseNodeLocationResult',
                 name: str):
        """
        :param str name: Name of the database
        """
        pulumi.set(__self__, "connection", connection)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def connection(self) -> 'outputs.GetDatabasesDatabaseNodeConnectionResult':
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter
    def location(self) -> 'outputs.GetDatabasesDatabaseNodeLocationResult':
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDatabasesDatabaseNodeConnectionResult(dict):
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 password: str,
                 port: int,
                 username: str):
        """
        :param str database: Database of the node
        :param str host: Host of the node
        :param str password: Password of the node
        :param int port: Port of the node
        :param str username: Username of the node
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        Database of the node
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Host of the node
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password of the node
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port of the node
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username of the node
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDatabasesDatabaseNodeLocationResult(dict):
    def __init__(__self__, *,
                 code: str,
                 country: str,
                 latitude: float,
                 longitude: float,
                 name: str,
                 region: str):
        """
        :param str code: Code of the location
        :param str country: Country of the location
        :param float latitude: Latitude of the location
        :param float longitude: Longitude of the location
        :param str name: Name of the database
        :param str region: Region of the location
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Code of the location
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def country(self) -> str:
        """
        Country of the location
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def latitude(self) -> float:
        """
        Latitude of the location
        """
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        """
        Longitude of the location
        """
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the location
        """
        return pulumi.get(self, "region")


