# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ClusterFirewallRuleArgs',
    'ClusterNetworkArgs',
    'ClusterNodeArgs',
]

@pulumi.input_type
class ClusterFirewallRuleArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[int] port: Port whose traffic is allowed
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: CIDRs and/or IP addresses allowed
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Port whose traffic is allowed
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        CIDRs and/or IP addresses allowed
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)


@pulumi.input_type
class ClusterNetworkArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 cidr: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[bool]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] region: Region of the network
        :param pulumi.Input[str] cidr: CIDR range for the network
        :param pulumi.Input[bool] external: Is the network externally defined
        :param pulumi.Input[str] external_id: ID of the network, if externally defined
        :param pulumi.Input[str] name: Name of the network
        """
        pulumi.set(__self__, "region", region)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_subnets is not None:
            pulumi.set(__self__, "private_subnets", private_subnets)
        if public_subnets is not None:
            pulumi.set(__self__, "public_subnets", public_subnets)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region of the network
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        """
        CIDR range for the network
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the network externally defined
        """
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the network, if externally defined
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateSubnets")
    def private_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "private_subnets")

    @private_subnets.setter
    def private_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_subnets", value)

    @property
    @pulumi.getter(name="publicSubnets")
    def public_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "public_subnets")

    @public_subnets.setter
    def public_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_subnets", value)


@pulumi.input_type
class ClusterNodeArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 volume_iops: Optional[pulumi.Input[int]] = None,
                 volume_size: Optional[pulumi.Input[int]] = None,
                 volume_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] region: Cloud provider region
        :param pulumi.Input[str] availability_zone: Cloud provider availability zone name
        :param pulumi.Input[str] instance_type: Instance type used for the node
        :param pulumi.Input[str] name: Node name
        :param pulumi.Input[int] volume_iops: Volume IOPS of the node data volume
        :param pulumi.Input[int] volume_size: Volume size of the node data volume
        :param pulumi.Input[str] volume_type: Volume type of the node data volume
        """
        pulumi.set(__self__, "region", region)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if volume_iops is not None:
            pulumi.set(__self__, "volume_iops", volume_iops)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Cloud provider region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud provider availability zone name
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Instance type used for the node
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Node name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="volumeIops")
    def volume_iops(self) -> Optional[pulumi.Input[int]]:
        """
        Volume IOPS of the node data volume
        """
        return pulumi.get(self, "volume_iops")

    @volume_iops.setter
    def volume_iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_iops", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume size of the node data volume
        """
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_size", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[str]]:
        """
        Volume type of the node data volume
        """
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_type", value)


