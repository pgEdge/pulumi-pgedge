// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pgedge

import (
	"context"
	"reflect"

	"errors"
	"github.com/pgEdge/pulumi-pgedge/sdk/go/pgedge/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Cluster struct {
	pulumi.CustomResourceState

	// List of backup store IDs to associate with the cluster
	BackupStoreIds pulumi.StringArrayOutput       `pulumi:"backupStoreIds"`
	Capacity       pulumi.IntOutput               `pulumi:"capacity"`
	CloudAccountId pulumi.StringOutput            `pulumi:"cloudAccountId"`
	CreatedAt      pulumi.StringOutput            `pulumi:"createdAt"`
	FirewallRules  ClusterFirewallRuleArrayOutput `pulumi:"firewallRules"`
	Name           pulumi.StringOutput            `pulumi:"name"`
	Networks       ClusterNetworkArrayOutput      `pulumi:"networks"`
	NodeLocation   pulumi.StringOutput            `pulumi:"nodeLocation"`
	Nodes          ClusterNodeArrayOutput         `pulumi:"nodes"`
	Regions        pulumi.StringArrayOutput       `pulumi:"regions"`
	// A map of tags to assign to the cluster
	ResourceTags pulumi.StringMapOutput `pulumi:"resourceTags"`
	SshKeyId     pulumi.StringPtrOutput `pulumi:"sshKeyId"`
	Status       pulumi.StringOutput    `pulumi:"status"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudAccountId == nil {
		return nil, errors.New("invalid value for required argument 'CloudAccountId'")
	}
	if args.Networks == nil {
		return nil, errors.New("invalid value for required argument 'Networks'")
	}
	if args.NodeLocation == nil {
		return nil, errors.New("invalid value for required argument 'NodeLocation'")
	}
	if args.Nodes == nil {
		return nil, errors.New("invalid value for required argument 'Nodes'")
	}
	if args.Regions == nil {
		return nil, errors.New("invalid value for required argument 'Regions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("pgedge:index/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("pgedge:index/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// List of backup store IDs to associate with the cluster
	BackupStoreIds []string              `pulumi:"backupStoreIds"`
	Capacity       *int                  `pulumi:"capacity"`
	CloudAccountId *string               `pulumi:"cloudAccountId"`
	CreatedAt      *string               `pulumi:"createdAt"`
	FirewallRules  []ClusterFirewallRule `pulumi:"firewallRules"`
	Name           *string               `pulumi:"name"`
	Networks       []ClusterNetwork      `pulumi:"networks"`
	NodeLocation   *string               `pulumi:"nodeLocation"`
	Nodes          []ClusterNode         `pulumi:"nodes"`
	Regions        []string              `pulumi:"regions"`
	// A map of tags to assign to the cluster
	ResourceTags map[string]string `pulumi:"resourceTags"`
	SshKeyId     *string           `pulumi:"sshKeyId"`
	Status       *string           `pulumi:"status"`
}

type ClusterState struct {
	// List of backup store IDs to associate with the cluster
	BackupStoreIds pulumi.StringArrayInput
	Capacity       pulumi.IntPtrInput
	CloudAccountId pulumi.StringPtrInput
	CreatedAt      pulumi.StringPtrInput
	FirewallRules  ClusterFirewallRuleArrayInput
	Name           pulumi.StringPtrInput
	Networks       ClusterNetworkArrayInput
	NodeLocation   pulumi.StringPtrInput
	Nodes          ClusterNodeArrayInput
	Regions        pulumi.StringArrayInput
	// A map of tags to assign to the cluster
	ResourceTags pulumi.StringMapInput
	SshKeyId     pulumi.StringPtrInput
	Status       pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// List of backup store IDs to associate with the cluster
	BackupStoreIds []string              `pulumi:"backupStoreIds"`
	Capacity       *int                  `pulumi:"capacity"`
	CloudAccountId string                `pulumi:"cloudAccountId"`
	FirewallRules  []ClusterFirewallRule `pulumi:"firewallRules"`
	Name           *string               `pulumi:"name"`
	Networks       []ClusterNetwork      `pulumi:"networks"`
	NodeLocation   string                `pulumi:"nodeLocation"`
	Nodes          []ClusterNode         `pulumi:"nodes"`
	Regions        []string              `pulumi:"regions"`
	// A map of tags to assign to the cluster
	ResourceTags map[string]string `pulumi:"resourceTags"`
	SshKeyId     *string           `pulumi:"sshKeyId"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// List of backup store IDs to associate with the cluster
	BackupStoreIds pulumi.StringArrayInput
	Capacity       pulumi.IntPtrInput
	CloudAccountId pulumi.StringInput
	FirewallRules  ClusterFirewallRuleArrayInput
	Name           pulumi.StringPtrInput
	Networks       ClusterNetworkArrayInput
	NodeLocation   pulumi.StringInput
	Nodes          ClusterNodeArrayInput
	Regions        pulumi.StringArrayInput
	// A map of tags to assign to the cluster
	ResourceTags pulumi.StringMapInput
	SshKeyId     pulumi.StringPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// List of backup store IDs to associate with the cluster
func (o ClusterOutput) BackupStoreIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.BackupStoreIds }).(pulumi.StringArrayOutput)
}

func (o ClusterOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.Capacity }).(pulumi.IntOutput)
}

func (o ClusterOutput) CloudAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CloudAccountId }).(pulumi.StringOutput)
}

func (o ClusterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ClusterOutput) FirewallRules() ClusterFirewallRuleArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterFirewallRuleArrayOutput { return v.FirewallRules }).(ClusterFirewallRuleArrayOutput)
}

func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ClusterOutput) Networks() ClusterNetworkArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterNetworkArrayOutput { return v.Networks }).(ClusterNetworkArrayOutput)
}

func (o ClusterOutput) NodeLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.NodeLocation }).(pulumi.StringOutput)
}

func (o ClusterOutput) Nodes() ClusterNodeArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterNodeArrayOutput { return v.Nodes }).(ClusterNodeArrayOutput)
}

func (o ClusterOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.Regions }).(pulumi.StringArrayOutput)
}

// A map of tags to assign to the cluster
func (o ClusterOutput) ResourceTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.ResourceTags }).(pulumi.StringMapOutput)
}

func (o ClusterOutput) SshKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.SshKeyId }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
